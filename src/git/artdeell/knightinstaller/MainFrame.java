/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package git.artdeell.knightinstaller;

import java.awt.EventQueue;
import java.awt.Frame;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author maks
 */
public class MainFrame extends javax.swing.JFrame implements Progress {
    boolean buttonMode = true;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stepProgressBar = new javax.swing.JProgressBar();
        partProgressBar = new javax.swing.JProgressBar();
        startButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        logArea.setColumns(20);
        logArea.setRows(5);
        logArea.setText("Press \"Start\" to install/update Spiral Knights\n\n");
        jScrollPane1.setViewportView(logArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(partProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(stepProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(startButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(partProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        if(buttonMode) {
            new Thread(new KnightInstaller(this)).start();
            startButton.setEnabled(false);
        }
        else System.exit(0);
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainFrame mf = new MainFrame();
            mf.setVisible(true);
        });
    }

    @Override
    public void postStepProgress(int prg) {
        EventQueue.invokeLater(() -> stepProgressBar.setValue(prg));
    }

    @Override
    public void postPartProgress(int prg) {
        EventQueue.invokeLater(() -> partProgressBar.setValue(prg));
    }

    @Override
    public void postMaxSteps(int max) {
        EventQueue.invokeLater(() -> stepProgressBar.setMaximum(max));
    }

    @Override
    public void postMaxPart(int max) {
        EventQueue.invokeLater(() -> partProgressBar.setMaximum(max));
    }

    @Override
    public void postLogLine(String line, Throwable th) {
        EventQueue.invokeLater(() -> {
            logArea.setText(logArea.getText() + line + "\n");
            if (th != null) {
                try (StringWriter swr = new StringWriter()) {
                    try ( PrintWriter wr = new PrintWriter(swr)) {
                        th.printStackTrace(wr);
                        logArea.setText(logArea.getText() + swr.toString());
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logArea;
    private javax.swing.JProgressBar partProgressBar;
    private javax.swing.JButton startButton;
    private javax.swing.JProgressBar stepProgressBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPartIndeterminate(boolean indeterminate) {
        EventQueue.invokeLater(() -> partProgressBar.setIndeterminate(indeterminate));
    }

    @Override
    public void moveToTop() {
        EventQueue.invokeLater(() -> {
            //toFront();
            hideAllForeignWindows();
        });
    }

    @Override
    public void unlockExit() {
        EventQueue.invokeLater(() -> {
            startButton.setText("Exit");
            startButton.setEnabled(true);
            buttonMode = false;
        });
    }
    public void hideAllForeignWindows() {
        for(Frame f : Frame.getFrames()) {
            f.setVisible(false);
        }
        this.setVisible(true);
    }
}
